extensions:
  health_check:
  zpages:
    endpoint: :55679

receivers:
  otlp:
    protocols:
      grpc:
      http:
  zipkin:

processors:
  # Sample everything
  batch:
  # Probabilistic sampling
  # See: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/probabilisticsamplerprocessor/testdata/config.yaml
  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 25
  # Tail sampling
  # See: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/tailsamplingprocessor
  tail_sampling:
    num_traces: 1000
    policies:
      [
        {
          name: latency_policy,
          type: latency,
          latency: { threshold_ms: 1000 },
        },
        {
          name: status_code_policy,
          type: status_code,
          status_code: { status_codes: [ERROR] },
        }
      ]

exporters:
  logging:
    # verbosity: detailed
  file/traces:
    path: /log/otel/traces.log
  file/metrics:
    path: /log/otel/metrics.log
  file/logs:
    path: /log/otel/logs.log
  otlp:
    endpoint: "${JAEGER_ENDPOINT}"
    tls:
      insecure: true
  prometheus:
    endpoint: "0.0.0.0:8889"
  loki:
    endpoint: "${LOKI_ENDPOINT}"
    tls:
      insecure: true

service:
  pipelines:
    traces:
      receivers:
        - otlp
        - zipkin
      # To enable sampling, replace the `batch` processor with one of the defined sampling processors (i.e. `probabilistic_sampler` or `tail_sampling`).
      processors: [batch]
      exporters:
        - logging
        - file/traces
        - otlp
    metrics:
      receivers:
        - otlp
      processors: [batch]
      exporters:
        - logging
        - file/metrics
        - prometheus
    logs:
      receivers:
        - otlp
      processors: [batch]
      exporters:
        - logging
        - file/logs
        - loki
  extensions:
    - health_check
    - zpages
